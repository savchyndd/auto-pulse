{"version":3,"file":"static/js/326.6108ae9d.chunk.js","mappings":"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","sources":["component/kit/FromToField/FromToField.jsx","images/icons/ChevronDownIcon.jsx","component/kit/SelectField/SelectField.jsx","component/Filter/Filter.jsx","pages/Favorites/Favorites.jsx","redux/filters/filtersSelectors.js","utils/createArrayWithStep.js","utils/getFilteredAdverts.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./FromToField.scss\";\nimport { toast } from \"react-toastify\";\nimport { formatingCommasToNumber } from \"utils/formatingCommasToNumber\";\n\nconst FromToField = (props) => {\n  const {\n    id = \"text-input\",\n    label = \"label\",\n    value = { from: \"\", to: \"\" },\n  } = props;\n\n  const [fieldValue, setFieldValue] = useState(value);\n\n  const onChange = (e) => {\n    if (!/^[0-9,]+$/.test(e.target.value) && e.target.value.trim()) {\n      toast.warn(\"Please write only numbers\");\n      return;\n    }\n\n    setFieldValue((prev) => ({\n      ...prev,\n      [e.target.name]: formatingCommasToNumber(e.target.value),\n    }));\n  };\n\n  return (\n    <div className=\"input-fromto-field__group\">\n      <p>{label}</p>\n      <div className=\"input-fromto__container\">\n        <div className=\"input-fromto__wrapper\">\n          <label htmlFor={`${id}_from`}>From</label>\n          <input\n            name={\"from\"}\n            value={fieldValue.from}\n            className=\"input__from\"\n            id={`${id}_from`}\n            type=\"text\"\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"input-fromto__wrapper\">\n          <label htmlFor={`${id}_to`}>To</label>\n          <input\n            name={\"to\"}\n            value={fieldValue.to}\n            className=\"input__to\"\n            id={`${id}_to`}\n            type=\"text\"\n            onChange={onChange}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FromToField;\n","import * as React from \"react\";\nconst ChevronDownIcon = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={20}\n    height={20}\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"m5 7.5 5 5 5-5\"\n    />\n  </svg>\n);\nexport default ChevronDownIcon;\n","import ChevronDownIcon from \"images/icons/ChevronDownIcon\";\nimport \"./SelectField.scss\";\nimport { useState } from \"react\";\n\nconst SelectField = (props) => {\n  const {\n    name,\n    id,\n    label,\n    placeholder = \"Enter the text\",\n    optionList,\n    value,\n  } = props;\n\n  const [fieldValue, setFieldValue] = useState(value);\n\n  const onChange = (e) => {\n    setFieldValue(e.target.value);\n  };\n\n  return (\n    <div className=\"select-field__wrapper\">\n      <label htmlFor={`${id}_${name}`}>{label}</label>\n      <select\n        name={name}\n        value={fieldValue}\n        id={`${id}_${name}`}\n        onChange={onChange}\n      >\n        <option value=\"\">{placeholder}</option>\n        {optionList.map((item) => (\n          <option key={`${name}_${Math.random()}`} value={item}>\n            {item}\n          </option>\n        ))}\n      </select>\n      <ChevronDownIcon />\n    </div>\n  );\n};\n\nexport default SelectField;\n","import FromToField from \"component/kit/FromToField/FromToField\";\nimport SelectField from \"component/kit/SelectField/SelectField\";\nimport Button from \"component/kit/Button/Button\";\n\nimport \"./Filter.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectAdvertsFilter } from \"redux/filters/filtersSelectors\";\nimport { setAdvertsFilter } from \"redux/filters/filtersSlice\";\nimport { removeCommasFromString } from \"utils/formatingCommasToNumber\";\n\nconst Filter = ({ filtersList }) => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectAdvertsFilter);\n\n  const handleChangeFilter = (e) => {\n    e.preventDefault();\n    const { brand, price, from, to } = e.target.elements;\n\n    const newfilters = {\n      [brand.name]: brand.value,\n      [price.name]: price.value,\n      mileage: {\n        from: removeCommasFromString(from.value),\n        to: removeCommasFromString(to.value),\n      },\n      prices: [],\n    };\n\n    dispatch(setAdvertsFilter(newfilters));\n  };\n\n  return (\n    <form className=\"filter\" onSubmit={handleChangeFilter}>\n      <SelectField\n        name=\"brand\"\n        label=\"Car brand\"\n        value={filter.brand}\n        optionList={filtersList.brands}\n      />\n      <SelectField\n        name=\"price\"\n        label=\"Price/ 1 hour\"\n        placeholder=\"To $\"\n        value={filter.price}\n        optionList={filtersList.prices}\n      />\n      <FromToField\n        name=\"mileage\"\n        label=\"Сar mileage / km\"\n        value={filter.mileage}\n      />\n      <Button type=\"submit\">Search</Button>\n    </form>\n  );\n};\n\nexport default Filter;\n","import AdvertsList from \"component/AdvertsList/AdvertsList\";\nimport Filter from \"component/Filter/Filter\";\nimport Button from \"component/kit/Button/Button\";\nimport Section from \"component/kit/Section/Section\";\nimport React, { useMemo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useGetAdvertsQuery } from \"redux/adverts/advertsSlice\";\nimport { selectAdvertsFilter } from \"redux/filters/filtersSelectors\";\nimport { createArrayWithStep } from \"utils/createArrayWithStep\";\nimport { getFilteredAdverts } from \"utils/getFilteredAdverts\";\n\nconst Favorites = () => {\n  const filter = useSelector(selectAdvertsFilter);\n\n  const { data: adverts, isLoading } = useGetAdvertsQuery();\n\n  const [currentPage, setCurrentPage] = useState(1);\n\n  let dataFilters = {\n    brands: [],\n    prices: [],\n  };\n  let visibleAdverts = useMemo(() => {}, []);\n\n  const limitAdverts = 12;\n  let totalAdverts = 0;\n  let totalPages = 0;\n\n  if (!isLoading) {\n    const favoritedAdverts = adverts.filter(({ favorite }) => favorite);\n\n    visibleAdverts = getFilteredAdverts(favoritedAdverts, filter);\n\n    dataFilters = {\n      brands: [...new Set(favoritedAdverts.map(({ make }) => make))],\n      prices: createArrayWithStep(\n        0,\n        Math.max(\n          ...new Set(\n            favoritedAdverts.map(({ rentalPrice }) =>\n              rentalPrice.replace(/(\\$)/, \"\")\n            )\n          )\n        ),\n        10\n      ),\n    };\n\n    totalAdverts = visibleAdverts.length;\n    totalPages = !totalAdverts ? 1 : Math.ceil(totalAdverts / limitAdverts);\n  }\n\n  const currentAdvertsData = useMemo(() => {\n    const firstPageIndex = (currentPage - 1) * limitAdverts;\n    const lastPageIndex = firstPageIndex + limitAdverts;\n\n    return visibleAdverts?.slice(firstPageIndex, lastPageIndex);\n  }, [currentPage, visibleAdverts]);\n\n  const hundleClickLoadMore = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage((prev) => prev + 1);\n      window.scrollTo(0, 0);\n    }\n  };\n  return (\n    <Section>\n      {!isLoading && (\n        <>\n          <Filter filtersList={dataFilters} />\n          <AdvertsList list={currentAdvertsData} />\n          {totalPages > currentPage && (\n            <Button\n              variant=\"text\"\n              className=\"load-more__btn\"\n              onClick={hundleClickLoadMore}\n            >\n              Load more\n            </Button>\n          )}\n        </>\n      )}\n    </Section>\n  );\n};\n\nexport default Favorites;\n","export const selectAdvertsFilter = (state) => state.filters;\n","export const createArrayWithStep = (start, end, step) => {\n  return Array.from(\n    { length: Math.floor((end - start) / step) + 1 },\n    (_, index) => start + index * step\n  );\n};\n","export const getFilteredAdverts = (adverts, filters) => {\n  return adverts.filter((car) => {\n    if (filters.brand && car.make !== filters.brand) {\n      return false;\n    }\n\n    if (\n      filters.price &&\n      Number(car.rentalPrice.replace(/(\\$)/, \"\")) > Number(filters.price)\n    ) {\n      return false;\n    }\n\n    if (filters.mileage.from.trim() || filters.mileage.to.trim()) {\n      const { from, to } = filters.mileage;\n      const carMileage = Number(car.mileage);\n\n      if (\n        (from !== undefined && carMileage < Number(from)) ||\n        (to !== undefined && carMileage > Number(to))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n"],"names":["props","_props$id","id","_props$label","label","_props$value","value","from","to","_useState","useState","_useState2","_slicedToArray","fieldValue","setFieldValue","onChange","e","test","target","trim","prev","_objectSpread","_defineProperty","name","formatingCommasToNumber","toast","warn","_jsxs","className","children","_jsx","htmlFor","concat","type","xmlns","width","height","fill","strokeLinecap","strokeLinejoin","strokeWidth","d","_props$placeholder","placeholder","optionList","map","item","Math","random","ChevronDownIcon","_ref","filtersList","dispatch","useDispatch","filter","useSelector","selectAdvertsFilter","onSubmit","_newfilters","preventDefault","_e$target$elements","elements","brand","price","newfilters","removeCommasFromString","setAdvertsFilter","SelectField","brands","prices","FromToField","mileage","Button","_useGetAdvertsQuery","useGetAdvertsQuery","adverts","data","isLoading","currentPage","setCurrentPage","dataFilters","visibleAdverts","useMemo","totalAdverts","totalPages","favoritedAdverts","favorite","getFilteredAdverts","_toConsumableArray","Set","_ref2","make","createArrayWithStep","max","apply","_ref3","rentalPrice","replace","length","ceil","currentAdvertsData","_visibleAdverts","firstPageIndex","lastPageIndex","slice","Section","_Fragment","Filter","AdvertsList","list","variant","onClick","window","scrollTo","state","filters","start","end","step","Array","floor","_","index","car","Number","_filters$mileage","carMileage","undefined"],"sourceRoot":""}